////////////////////////////////////////////////////////////////////////////////////////////////////
// Court, CourtData
class Court {
  String? key;
  CourtData? courtData;

  Court(this.key, this.courtData);
}

class CourtData {
  String? name;
  String? imagePath;
  String? place;
  double? ticketPrice;


  CourtData( this.name, this.imagePath, this.place, this.ticketPrice);

  Map<String, dynamic> toJson() {
    return {
      "name": name,
      "image": imagePath,
      "place": place,
      "ticket_price": ticketPrice,
    };
  }

  CourtData.fromJson(Map<dynamic, dynamic> json) {
    name = json["name"];
    imagePath = json["image"];
    place = json["place"];
    ticketPrice = checkDouble(json["ticket_price"]);
  }

  double? checkDouble(value) {
    if (value is String) {
      return double.parse(value);
    } else if (value is double) {
      return value;
    } else if (value is int) {
      return double.parse(value.toString());
    } else {
      return 0.0;
    }
  }

  int? checkInteger(established) {
    if (established is String) {
      return int.parse(established);
    } else if (established is double) {
      return int.parse(established.toString());
    } else if (established is int) {
      return established;
    } else {
      return 0;
    }
  }
}
////////////////////////////////////////////////////////////////////////////////////////////////////
//DatabaseHelper
import 'package:firebase_database/firebase_database.dart';
import 'package:flutter/material.dart';
import 'court_model.dart';

class DatabaseHelper {
  static Future<void> delete(String key) async {
    DatabaseReference databaseReference = FirebaseDatabase.instance.ref();
    await databaseReference.child("courts").child(key).remove();
  }

  static Future<void> update(
      String key, CourtData castleData, BuildContext context) async {
    DatabaseReference databaseReference = FirebaseDatabase.instance.ref();
    await databaseReference
        .child("courts")
        .child(key)
        .update(castleData.toJson()).then((_) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
            content: Text('Operation updated successfully')),
      );
    }).catchError((error) {
      // Handle errors and show a different snackbar
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
            content: Text(
                'Failed to update: ${error.toString()}')),
      );
    });
  }

  static Future<void> addNew(CourtData castleData) {
    DatabaseReference databaseReference = FirebaseDatabase.instance.ref();
    return databaseReference
        .child('courts')
        .push()
        .set(castleData.toJson())
        .then((value) => print("Courts created successfully!"))
        .catchError((error) => print("Failed to create castle data: $error"));
  }

  static void readFirebaseRealtimeDBMain(
      Function(List<Court>) castleListCallback) {
    DatabaseReference databaseReference = FirebaseDatabase.instance.ref();
    databaseReference.child("padlecourt").onValue.listen((castleDataJson) {
      if (castleDataJson.snapshot.exists) {
        CourtData castleData;
        Court castle;
        List<Court> castleList = [];
        castleDataJson.snapshot.children.forEach((element) {
          castleData = CourtData.fromJson(element.value as Map);
          castle = Court(element.key, castleData);
          castleList.add(castle);
        });
        castleListCallback(castleList);
      } else {
        print("The data snapshot does not exist!");
      }
    });
  }

  static void createFirebaseRealtimeDBWithUniqueIDs(
      String mainNodeName, List<Map<String, dynamic>> fortList) {
    DatabaseReference databaseReference =
    FirebaseDatabase.instance.ref(mainNodeName);
    if (fortList.isNotEmpty) {
      fortList.forEach((fort) {
        databaseReference
            .push()
            .set(fort)
            .then((value) => print("CourtList data successfully saved!"))
            .catchError((error) => print("Failed to write message: $error"));
      });
    } else {
      print("CourtList is empty!");
    }
  }

  static void writeMessageToFirebase() {
    final databaseReference = FirebaseDatabase.instance.ref();
    databaseReference
        .child('messages')
        .set({'message': 'HelloWorld'})
        .then((value) => print("Message written successfully"))
        .catchError((error) => print("Failed to write message: $error"));
  }
}
////////////////////////////////////////////////////////////////////////////////////////////////////
// List
List<Map<String,dynamic>> fortList = [
  {
    'name':'Muscat Hills',
    'imagePath':'f1.jpg',
    'place':'Muscat',
    'ticket_price':20,
  },
  {
    'name':'Big Wall',
    'imagePath':'f2.jpeg',
    'place':'Izki',
    'ticket_price':15,
  },
  {
    'name':'The Fort',
    'imagePath':'f5.jpeg',
    'place':'Al Rustaq',
    'ticket_price':18,
  },
  {
    'name':'Mountain',
    'imagePath':'f6.jpg',
    'place':'Ibra',
    'ticket_price':10,
  },
  {
    'name':'The Desert',
    'imagePath':'s1.webp',
    'place':'Manah',
    'ticket_price':8,
  },
  {
    'name':'The Shore',
    'imagePath':'f1.jpg',
    'place':'Al Suwiq',
    'ticket_price':15,
  },
];


